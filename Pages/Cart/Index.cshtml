@page
@model AccessoryWorld.Pages.Cart.IndexModel
@{
    ViewData["Title"] = "Shopping Cart";
}

<div class="container py-4">
    <div class="row">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">
                        <i class="fas fa-shopping-cart"></i> Shopping Cart
                        @if (Model.Cart.TotalItems > 0)
                        {
                            <span class="badge bg-primary ms-2">@Model.Cart.TotalItems items</span>
                        }
                    </h4>
                </div>
                <div class="card-body">
                    @if (Model.Cart.Items.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Price</th>
                                        <th>Quantity</th>
                                        <th>Total</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.Cart.Items)
                                    {
                                        <tr data-cart-item-id="@item.Id">
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    @if (item.Product.ProductImages.Any())
                                                    {
                                                        <img src="@item.Product.ProductImages.First().ImageUrl" 
                                                             alt="@item.Product.Name" 
                                                             class="img-thumbnail me-3" 
                                                             style="width: 60px; height: 60px; object-fit: cover;">
                                                    }
                                                    else
                                                    {
                                                        <div class="bg-light d-flex align-items-center justify-content-center me-3" 
                                                             style="width: 60px; height: 60px;">
                                                            <i class="fas fa-image text-muted"></i>
                                                        </div>
                                                    }
                                                    <div>
                                                        <h6 class="mb-1">@item.Product.Name</h6>
                                                        <small class="text-muted">@item.Product.Brand.Name</small>
                                                        @if (!string.IsNullOrEmpty(item.SKU.Variant))
                                                        {
                                                            <br>
                                                            <small class="text-muted">@item.SKU.Variant</small>
                                                        }
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="fw-semibold">R @item.UnitPrice.ToString("N2")</span>
                                            </td>
                                            <td>
                                                <div class="input-group" style="width: 120px;">
                                                    <button class="btn btn-outline-secondary btn-sm" type="button" 
                                                            onclick="updateQuantity(@item.Id, @(item.Quantity - 1))">
                                                        <i class="fas fa-minus"></i>
                                                    </button>
                                                    <input type="number" class="form-control form-control-sm text-center" 
                                                           value="@item.Quantity" min="1" max="@item.SKU.StockQuantity"
                                                           onchange="updateQuantity(@item.Id, this.value)">
                                                    <button class="btn btn-outline-secondary btn-sm" type="button" 
                                                            onclick="updateQuantity(@item.Id, @(item.Quantity + 1))">
                                                        <i class="fas fa-plus"></i>
                                                    </button>
                                                </div>
                                                <small class="text-muted d-block mt-1">@item.SKU.StockQuantity in stock</small>
                                            </td>
                                            <td>
                                                <span class="fw-bold">R @item.TotalPrice.ToString("N2")</span>
                                            </td>
                                            <td>
                                                <button class="btn btn-outline-danger btn-sm" 
                                                        onclick="removeFromCart(@item.Id)" 
                                                        title="Remove item">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <a href="@Url.Action("Index", "Products")" class="btn btn-outline-primary">
                                <i class="fas fa-arrow-left"></i> Continue Shopping
                            </a>
                            <button class="btn btn-outline-secondary" onclick="clearCart()">
                                <i class="fas fa-trash"></i> Clear Cart
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
                            <h5>Your cart is empty</h5>
                            <p class="text-muted">Add some products to get started!</p>
                            <a href="@Url.Action("Index", "Products")" class="btn btn-primary">
                                <i class="fas fa-shopping-bag"></i> Start Shopping
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        @if (Model.Cart.Items.Any())
        {
            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Order Summary</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal:</span>
                            <span>R @Model.Cart.SubTotal.ToString("N2")</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>VAT (15%):</span>
                            <span>R @Model.Cart.VATAmount.ToString("N2")</span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between mb-3">
                            <strong>Total:</strong>
                            <strong>R @Model.Cart.Total.ToString("N2")</strong>
                        </div>
                        
                        <div class="d-grid gap-2">
                            <a href="@Url.Action("Index", "Checkout")" class="btn btn-primary btn-lg">
                                <i class="fas fa-credit-card"></i> Proceed to Checkout
                            </a>
                            <small class="text-muted text-center mt-2">
                                <i class="fas fa-lock"></i> Secure checkout with SSL encryption
                            </small>
                        </div>
                    </div>
                </div>
                
                <!-- Delivery Information -->
                <div class="card mt-3">
                    <div class="card-body">
                        <h6><i class="fas fa-truck"></i> Delivery Information</h6>
                        <ul class="list-unstyled small mb-0">
                            <li><i class="fas fa-check text-success"></i> Free delivery on orders over R500</li>
                            <li><i class="fas fa-check text-success"></i> 2-3 business days delivery</li>
                            <li><i class="fas fa-check text-success"></i> Click & Collect available</li>
                        </ul>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        // Update cart item quantity
        async function updateQuantity(cartItemId, quantity) {
            if (quantity < 1) {
                removeFromCart(cartItemId);
                return;
            }
            
            try {
                const response = await fetch('/Cart/UpdateItem', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({
                        cartItemId: cartItemId,
                        quantity: parseInt(quantity)
                    })
                });
                
                // Check if user needs to login
                if (response.status === 401 || response.redirected && response.url.includes('/Account/Login')) {
                    alert('Please login to update your cart.');
                    window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent(window.location.pathname);
                    return;
                }
                
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Failed to update quantity. Please try again.');
                }
            } catch (error) {
                console.error('Error updating quantity:', error);
                alert('An error occurred. Please try again.');
            }
        }
        
        // Remove item from cart
        async function removeFromCart(cartItemId) {
            if (!confirm('Are you sure you want to remove this item from your cart?')) {
                return;
            }
            
            try {
                const response = await fetch('/Cart/RemoveItem', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({
                        cartItemId: cartItemId
                    })
                });
                
                // Check if user needs to login
                if (response.status === 401 || response.redirected && response.url.includes('/Account/Login')) {
                    alert('Please login to update your cart.');
                    window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent(window.location.pathname);
                    return;
                }
                
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Failed to remove item. Please try again.');
                }
            } catch (error) {
                console.error('Error removing item:', error);
                alert('An error occurred. Please try again.');
            }
        }
        
        // Clear entire cart
        async function clearCart() {
            if (!confirm('Are you sure you want to clear your entire cart?')) {
                return;
            }
            
            try {
                const response = await fetch('/Cart/Clear', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });
                
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Failed to clear cart. Please try again.');
                }
            } catch (error) {
                console.error('Error clearing cart:', error);
                alert('An error occurred. Please try again.');
            }
        }
        
        // Update cart count in navigation
        function updateCartCount() {
            fetch('/Cart/GetCount')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('cart-count').textContent = data.count;
                })
                .catch(error => console.error('Error updating cart count:', error));
        }
    </script>
}