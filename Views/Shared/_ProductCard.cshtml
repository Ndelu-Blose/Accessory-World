@using AccessoryWorld.Models
@model Product
<!-- probe: product-card -->
<div class="product-card" data-category="@Model.Category?.Name?.ToLower()" data-product-id="@Model.Id">
    <div class="product-image position-relative">
        @if (Model.ProductImages?.Any() == true)
        {
            <img src="@Model.ProductImages.First().ImageUrl" alt="@Model.Name" style="max-width: 100%; max-height: 200px; object-fit: contain;" />
        }
        else
        {
            <!-- Placeholder SVG -->
            <svg width="120" height="120" viewBox="0 0 120 120" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect width="120" height="120" rx="8" fill="#F3F4F6"/>
                <path d="M40 45H80V75H40V45Z" stroke="#9CA3AF" stroke-width="2" fill="none"/>
                <circle cx="50" cy="55" r="3" fill="#9CA3AF"/>
                <path d="M45 70L55 60L65 70L75 55" stroke="#9CA3AF" stroke-width="2" fill="none"/>
            </svg>
        }
        <!-- Wishlist Button -->
        <button class="wishlist-btn position-absolute" data-product-id="@Model.Id" onclick="toggleWishlist(@Model.Id, this)" title="Add to Wishlist">
            <i class="far fa-heart"></i>
        </button>
    </div>
    
    <div class="product-brand">@(Model.Brand?.Name ?? "Accessory World")</div>
    
    <h4>@Model.Name</h4>
    
    <div class="product-price">
        @if (Model.SKUs?.Any() == true)
        {
            var availableSkus = Model.SKUs.Where(s => s.Price > 0).ToList();
            if (availableSkus.Any())
            {
                var minPrice = availableSkus.Min(s => s.Price);
                var maxPrice = availableSkus.Max(s => s.Price);
                
                if (minPrice == maxPrice)
                {
                    <span class="price-value">R@(minPrice.ToString("N2"))</span>
                }
                else
                {
                    <span class="price-range">R@(minPrice.ToString("N2")) - R@(maxPrice.ToString("N2"))</span>
                }
            }
            else
            {
                @* Fallback to product price if SKUs exist but have no price *@
                @if (Model.Price > 0)
                {
                    <span class="price-value">R@(Model.Price.ToString("N2"))</span>
                }
                else
                {
                    <span class="price-request">Price on request</span>
                }
            }
        }
        else
        {
            @* Fallback to product price if no SKUs *@
            @if (Model.Price > 0)
            {
                <span class="price-value">R@(Model.Price.ToString("N2"))</span>
            }
            else
            {
                <span class="price-request">Price on request</span>
            }
        }
    </div>
    
    <div class="product-actions d-flex gap-2">
        @if (Model.SKUs?.Any() == true && Model.SKUs.Any(s => s.Price > 0))
        {
            <button class="btn btn-primary btn-sm" onclick="addToCartFromCard(@Model.Id, @Model.SKUs.First().Id)" title="Add to Cart">
                <i class="fas fa-shopping-cart"></i> ADD TO CART
            </button>
        }
        <a href="@Url.Action("Details", "Products", new { id = Model.Id })" class="btn btn-secondary btn-sm flex-grow-1">DETAILS</a>
    </div>
</div>

<style>
    .product-card {
        position: relative;
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        border: 1px solid #f0f0f0;
        height: 100%;
        display: flex;
        flex-direction: column;
        min-height: 400px;
    }
    
    .product-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.12);
    }
    
    .product-image {
        text-align: center;
        margin-bottom: 1rem;
        height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8f9fa;
        border-radius: 8px;
        position: relative;
    }
    
    .product-image img {
        max-width: 100%;
        max-height: 180px;
        object-fit: contain;
    }
    
    .product-brand {
        font-size: 0.875rem;
        color: #666;
        margin-bottom: 0.5rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .product-card h4 {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: #333;
        line-height: 1.4;
        flex-grow: 1;
        min-height: 2.8rem;
    }
    
    .product-price {
        font-size: 1.25rem;
        font-weight: 700;
        color: #e74c3c;
        margin-bottom: 1rem;
    }
    
    .price-value, .price-range {
        color: #e74c3c;
    }
    
    .price-request {
        color: #666;
        font-style: italic;
    }
    
    .product-actions {
        margin-top: auto;
    }
    
    .btn-secondary {
        background: #007bff;
        color: white;
        border: none;
        padding: 0.75rem 1rem;
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
        text-align: center;
        width: 100%;
    }
    
    .btn-secondary:hover {
        background: #0056b3;
        color: white;
        text-decoration: none;
        transform: translateY(-1px);
    }
    
    .wishlist-btn {
        top: 10px;
        right: 10px;
        background: rgba(255, 255, 255, 0.9);
        border: none;
        border-radius: 50%;
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        backdrop-filter: blur(5px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .wishlist-btn:hover {
        background: rgba(255, 255, 255, 1);
        transform: scale(1.1);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    
    .wishlist-btn i {
        font-size: 16px;
        color: #e74c3c;
        transition: all 0.3s ease;
    }
    
    .wishlist-btn.active i {
        color: #e74c3c;
    }
    
    .wishlist-btn.active {
        background: rgba(231, 76, 60, 0.1);
    }
    
    .product-actions {
        margin-top: 10px;
    }
</style>

<script>
    function toggleWishlist(productId, button) {
        const isActive = button.classList.contains('active');
        const icon = button.querySelector('i');
        
        if (isActive) {
            // Remove from wishlist
            fetch('/Wishlist/Remove', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: `productId=${productId}`
            })
            .then(response => {
                if (response.status === 401 || response.redirected && response.url.includes('/Account/Login')) {
                    showWishlistMessage('Please login to manage your wishlist.', 'info');
                    setTimeout(() => {
                        window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent(window.location.pathname);
                    }, 1500);
                    return null;
                }
                return response.json();
            })
            .then(data => {
                if (data && data.success) {
                    button.classList.remove('active');
                    icon.classList.remove('fas');
                    icon.classList.add('far');
                    button.title = 'Add to Wishlist';
                    showWishlistMessage(data.message, 'success');
                    updateWishlistCount(data.count);
                } else if (data) {
                    showWishlistMessage(data.message || 'Failed to remove from wishlist.', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showWishlistMessage('An error occurred.', 'error');
            });
        } else {
            // Add to wishlist
            fetch('/Wishlist/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: `productId=${productId}`
            })
            .then(response => {
                if (response.status === 401 || response.redirected && response.url.includes('/Account/Login')) {
                    showWishlistMessage('Please login to add items to your wishlist.', 'info');
                    setTimeout(() => {
                        window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent(window.location.pathname);
                    }, 1500);
                    return null;
                }
                return response.json();
            })
            .then(data => {
                if (data && data.success) {
                    button.classList.add('active');
                    icon.classList.remove('far');
                    icon.classList.add('fas');
                    button.title = 'Remove from Wishlist';
                    showWishlistMessage(data.message, 'success');
                    updateWishlistCount(data.count);
                } else if (data) {
                    showWishlistMessage(data.message || 'Failed to add to wishlist.', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showWishlistMessage('An error occurred.', 'error');
            });
        }
    }
    
    function showWishlistMessage(message, type) {
        // Create a simple toast notification
        const toast = document.createElement('div');
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 6px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            transition: all 0.3s ease;
            font-size: 14px;
            max-width: 300px;
            ${
                type === 'success' ? 'background: #27ae60;' : 
                type === 'info' ? 'background: #3498db;' : 
                'background: #e74c3c;'
            }
        `;
        toast.textContent = message;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.opacity = '0';
            toast.style.transform = 'translateX(100%)';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }
    
    function updateWishlistCount(count) {
        const wishlistCountElement = document.querySelector('.wishlist-count');
        if (wishlistCountElement) {
            wishlistCountElement.textContent = count;
            wishlistCountElement.style.display = count > 0 ? 'inline' : 'none';
        }
    }
    
    // Initialize wishlist states on page load
    document.addEventListener('DOMContentLoaded', function() {
        const productCards = document.querySelectorAll('.product-card[data-product-id]');
        productCards.forEach(card => {
            const productId = card.getAttribute('data-product-id');
            const wishlistBtn = card.querySelector('.wishlist-btn');
            
            if (productId && wishlistBtn) {
                fetch(`/Wishlist/IsInWishlist?productId=${productId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.isInWishlist) {
                        wishlistBtn.classList.add('active');
                        const icon = wishlistBtn.querySelector('i');
                        icon.classList.remove('far');
                        icon.classList.add('fas');
                        wishlistBtn.title = 'Remove from Wishlist';
                    }
                })
                .catch(error => console.error('Error checking wishlist status:', error));
            }
        });
    });
</script>