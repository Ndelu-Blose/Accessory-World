@using AccessoryWorld.ViewModels
@model CheckoutViewModel
@{
    ViewData["Title"] = "Checkout";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="checkout-page">
<div class="checkout-container">
    <div class="checkout-header">
        <h1>Secure Checkout</h1>
        <p>Complete your order safely and securely</p>
    </div>
    
    <div class="row">
        <div class="col-lg-8">
            <div class="checkout-card">
                <div class="card-header">
                    <h4 class="mb-0"><i class="fas fa-shopping-cart"></i> Order Details</h4>
                </div>
                <div class="card-body">
                    <form asp-action="ProcessOrder" method="post" id="checkoutForm">
                        @Html.AntiForgeryToken()
                        
                        <!-- Delivery Method Selection -->
                        <div class="mb-4">
                            <h5 class="section-title"><i class="fas fa-truck"></i> Delivery Method</h5>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="delivery-method-card" data-method="delivery">
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="FulfillmentMethod" id="delivery" value="DELIVERY" checked>
                                            <label class="form-check-label" for="delivery">
                                                <strong><i class="fas fa-shipping-fast"></i> Home Delivery</strong>
                                                <small class="text-muted d-block">Delivered to your doorstep</small>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="delivery-method-card" data-method="pickup">
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="FulfillmentMethod" id="pickup" value="PICKUP">
                                            <label class="form-check-label" for="pickup">
                                                <strong><i class="fas fa-store"></i> Store Pickup</strong>
                                                <small class="text-muted d-block">Collect from our store</small>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Address Selection (for delivery) -->
                        <div id="addressSection" class="mb-4 fade-in">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 class="section-title"><i class="fas fa-map-marker-alt"></i> Delivery Address</h5>
                                <a href="@Url.Action("AddAddress")" class="btn btn-outline-primary btn-sm">
                                    <i class="fas fa-plus"></i> Add New Address
                                </a>
                            </div>
                            
                            @if (Model.UserAddresses.Any())
                            {
                                <div class="row">
                                    @foreach (var address in Model.UserAddresses)
                                    {
                                        <div class="col-md-6 mb-3">
                                            <div class="card address-card" data-address-id="@address.PublicId">
                                                <div class="card-body">
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="radio" name="SelectedAddressId" 
                                                               id="address_@address.PublicId" value="@address.PublicId" 
                                                               @(address.IsDefault ? "checked" : "")>
                                                        <label class="form-check-label" for="address_@address.PublicId">
                                                            <h6 class="mb-1">@address.FullName</h6>
                                                            <p class="mb-1">@address.AddressLine1</p>
                                                            @if (!string.IsNullOrEmpty(address.AddressLine2))
                                                            {
                                                                <p class="mb-1">@address.AddressLine2</p>
                                                            }
                                                            <p class="mb-1">@address.City, @address.Province @address.PostalCode</p>
                                                            <p class="mb-1">@address.Country</p>
                                                            <p class="mb-0 text-muted"><i class="fas fa-phone"></i> @address.PhoneNumber</p>
                                                            @if (address.IsDefault)
                                                            {
                                                                <span class="badge bg-primary ms-2">Default</span>
                                                            }
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-warning border-0 shadow-sm">
                                    <div class="d-flex align-items-center">
                                        <div class="me-3">
                                            <i class="fas fa-map-marker-alt fa-2x text-warning"></i>
                                        </div>
                                        <div class="flex-grow-1">
                                            <h6 class="alert-heading mb-2">No Delivery Address Found</h6>
                                            <p class="mb-2">You need to add a delivery address to complete your order.</p>
                                            <div class="d-flex gap-2">
                                                <a href="@Url.Action("AddAddress")" class="btn btn-warning btn-sm">
                                                    <i class="fas fa-plus"></i> Add Address Now
                                                </a>
                                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="showInlineAddressForm()">
                                                    <i class="fas fa-edit"></i> Enter Address Here
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="switchToPickup()">
                                                    <i class="fas fa-store"></i> Or Choose Store Pickup
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Inline Address Form (Workaround) -->
                                <div id="inlineAddressForm" class="card border-primary shadow-sm mt-3" style="display: none;">
                                    <div class="card-header bg-primary text-white">
                                        <h6 class="mb-0"><i class="fas fa-map-marker-alt"></i> Enter Delivery Address</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="InlineAddress_FullName" class="form-label">Full Name <span class="text-danger">*</span></label>
                                                <input type="text" class="form-control" id="InlineAddress_FullName" name="InlineAddress.FullName" required>
                                                <div class="invalid-feedback">Please enter your full name.</div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="InlineAddress_PhoneNumber" class="form-label">Phone Number <span class="text-danger">*</span></label>
                                                <input type="tel" class="form-control" id="InlineAddress_PhoneNumber" name="InlineAddress.PhoneNumber" required>
                                                <div class="invalid-feedback">Please enter a valid phone number.</div>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="InlineAddress_AddressLine1" class="form-label">Address Line 1 <span class="text-danger">*</span></label>
                                            <input type="text" class="form-control" id="InlineAddress_AddressLine1" name="InlineAddress.AddressLine1" required>
                                            <div class="invalid-feedback">Please enter your address.</div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="InlineAddress_AddressLine2" class="form-label">Address Line 2 (Optional)</label>
                                            <input type="text" class="form-control" id="InlineAddress_AddressLine2" name="InlineAddress.AddressLine2">
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4 mb-3">
                                                <label for="InlineAddress_City" class="form-label">City <span class="text-danger">*</span></label>
                                                <input type="text" class="form-control" id="InlineAddress_City" name="InlineAddress.City" required>
                                                <div class="invalid-feedback">Please enter your city.</div>
                                            </div>
                                            <div class="col-md-4 mb-3">
                                                <label for="InlineAddress_Province" class="form-label">Province <span class="text-danger">*</span></label>
                                                <select class="form-select" id="InlineAddress_Province" name="InlineAddress.Province" required>
                                                    <option value="">Select Province</option>
                                                    <option value="Eastern Cape">Eastern Cape</option>
                                                    <option value="Free State">Free State</option>
                                                    <option value="Gauteng">Gauteng</option>
                                                    <option value="KwaZulu-Natal">KwaZulu-Natal</option>
                                                    <option value="Limpopo">Limpopo</option>
                                                    <option value="Mpumalanga">Mpumalanga</option>
                                                    <option value="Northern Cape">Northern Cape</option>
                                                    <option value="North West">North West</option>
                                                    <option value="Western Cape">Western Cape</option>
                                                </select>
                                                <div class="invalid-feedback">Please select your province.</div>
                                            </div>
                                            <div class="col-md-4 mb-3">
                                                <label for="InlineAddress_PostalCode" class="form-label">Postal Code <span class="text-danger">*</span></label>
                                                <input type="text" class="form-control" id="InlineAddress_PostalCode" name="InlineAddress.PostalCode" pattern="[0-9]{4}" maxlength="4" required>
                                                <div class="invalid-feedback">Please enter a valid 4-digit postal code.</div>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="InlineAddress_Country" class="form-label">Country <span class="text-danger">*</span></label>
                                            <input type="text" class="form-control" id="InlineAddress_Country" name="InlineAddress.Country" value="South Africa" readonly>
                                        </div>
                                        <div class="form-check mb-3">
                                            <input class="form-check-input" type="checkbox" id="InlineAddress_IsDefault" name="InlineAddress.IsDefault" value="true">
                                            <label class="form-check-label" for="InlineAddress_IsDefault">
                                                Save as default address
                                            </label>
                                        </div>
                                        <input type="hidden" name="UseInlineAddress" value="true">
                                        <div class="d-flex gap-2">
                                            <button type="button" class="btn btn-outline-secondary" onclick="hideInlineAddressForm()">
                                                <i class="fas fa-times"></i> Cancel
                                            </button>
                                            <button type="button" class="btn btn-success" onclick="validateInlineAddress()">
                                                <i class="fas fa-check"></i> Use This Address
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Store Pickup Information (hidden by default) -->
                        <div id="pickupSection" class="mb-4 fade-in" style="display: none;">
                            <h5 class="section-title"><i class="fas fa-store"></i> Store Pickup Information</h5>
                            <div class="pickup-info">
                                <h6><i class="fas fa-store"></i> AccessoryWorld Store</h6>
                                <p class="mb-1"><strong>Address:</strong> 123 Main Street, Johannesburg, Gauteng 2000</p>
                                <p class="mb-1"><strong>Hours:</strong> Monday - Friday: 9:00 AM - 6:00 PM, Saturday: 9:00 AM - 4:00 PM</p>
                                <p class="mb-0"><strong>Phone:</strong> +27 11 123 4567</p>
                                <hr>
                                <small class="text-muted">
                                    <i class="fas fa-info-circle"></i>
                                    You will receive an OTP via SMS when your order is ready for pickup.
                                </small>
                            </div>
                        </div>

                        <!-- Order Notes -->
                        <div class="mb-4">
                            <h5 class="section-title"><i class="fas fa-sticky-note"></i> Order Notes (Optional)</h5>
                            <textarea class="form-control" name="Notes" rows="3" 
                                      placeholder="Any special instructions for your order..."></textarea>
                        </div>

                        <!-- Hidden fields for totals -->
                        <input type="hidden" name="SubTotal" value="@Model.SubTotal" />
                        <input type="hidden" name="TaxAmount" value="@Model.TaxAmount" />
                        <input type="hidden" name="ShippingFee" id="hiddenShippingFee" value="@Model.ShippingFee" />
                        <input type="hidden" name="Total" id="hiddenTotal" value="@Model.Total" />

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg" id="placeOrderBtn">
                                <i class="fas fa-credit-card"></i> Place Order
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Order Summary -->
        <div class="col-lg-4">
            <div class="checkout-card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-receipt"></i> Order Summary</h5>
                </div>
                <div class="card-body">
                    <!-- Cart Items -->
                    @foreach (var item in Model.CartItems)
                    {
                        <div class="order-summary-item">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="flex-grow-1">
                                    <h6 class="mb-1">@item.ProductName</h6>
                                    <small class="text-muted">@item.SKUName</small><br>
                                    <small class="text-muted"><i class="fas fa-cube"></i> Qty: @item.Quantity</small>
                                </div>
                                <div class="text-end">
                                    <strong>R @item.LineTotal.ToString("N2")</strong>
                                </div>
                            </div>
                        </div>
                    }
                    
                    <!-- Delivery Information -->
                    <div class="delivery-info mb-3" id="deliveryInfoSection">
                        <h6 class="mb-2"><i class="fas fa-truck"></i> Delivery Information</h6>
                        <div id="selectedDeliveryMethod">
                            <small class="text-muted">Please select a delivery method</small>
                        </div>
                        <div id="selectedAddress" style="display: none;">
                            <div class="selected-address-display">
                                <small class="text-muted">Delivery Address:</small>
                                <div id="addressDetails"></div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Trade-In Credit Note Section -->
                    <div class="credit-note-section mb-3">
                        <h6 class="mb-2"><i class="fas fa-ticket-alt"></i> Trade-In Credit Note</h6>
                        
                        @if (Model.HasValidCreditNote && !string.IsNullOrEmpty(Model.CreditNoteCode))
                        {
                            <!-- Applied Credit Note -->
                            <div class="alert alert-success" role="alert">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <i class="fas fa-check-circle"></i>
                                        <strong>Credit Note Applied</strong><br>
                                        <small>Code: @Model.CreditNoteCode</small>
                                    </div>
                                    <div class="text-end">
                                        <strong class="text-success">-R @Model.CreditNoteAmount.ToString("N2")</strong><br>
                                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeCreditNote()">
                                            <i class="fas fa-times"></i> Remove
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <!-- Credit Note Input Form -->
                            <div class="credit-note-form">
                                <div class="input-group mb-2">
                                    <input type="text" class="form-control" id="creditNoteCode" placeholder="Enter credit note code" 
                                           value="@Model.CreditNoteCode" maxlength="20">
                                    <button type="button" class="btn btn-outline-primary" onclick="applyCreditNote()">
                                        <i class="fas fa-check"></i> Apply
                                    </button>
                                </div>
                                
                                @if (Model.AvailableCreditBalance > 0)
                                {
                                    <div class="mb-2">
                                        <label for="creditNoteAmount" class="form-label">Amount to use (max: R @Model.AvailableCreditBalance.ToString("N2")):</label>
                                        <div class="input-group">
                                            <span class="input-group-text">R</span>
                                            <input type="number" class="form-control" id="creditNoteAmount" 
                                                   min="0" max="@Model.AvailableCreditBalance" step="0.01" 
                                                   value="@Model.CreditNoteRequestedAmount" placeholder="0.00">
                                        </div>
                                    </div>
                                }
                                
                                @if (Model.UserCreditNotes != null && Model.UserCreditNotes.Any())
                                {
                                    <div class="available-credits">
                                        <small class="text-muted">Your available credit notes:</small>
                                        <div class="credit-notes-list mt-1">
                                            @foreach (var creditNote in Model.UserCreditNotes.Take(3))
                                            {
                                                <div class="credit-note-item">
                                                    <button type="button" class="btn btn-sm btn-outline-secondary mb-1" 
                                                            onclick="selectCreditNote('@creditNote.CreditNoteCode', @creditNote.RemainingAmount)">
                                                        <i class="fas fa-ticket-alt"></i> @creditNote.CreditNoteCode 
                                                        <span class="badge bg-success">R @creditNote.RemainingAmount.ToString("N2")</span>
                                                    </button>
                                                </div>
                                            }
                                            @if (Model.UserCreditNotes.Count() > 3)
                                            {
                                                <small class="text-muted">+@(Model.UserCreditNotes.Count() - 3) more available</small>
                                            }
                                        </div>
                                    </div>
                                }
                                
                                <div id="creditNoteError" class="alert alert-danger mt-2" style="display: none;">
                                    <i class="fas fa-exclamation-triangle"></i>
                                    <span id="creditNoteErrorMessage"></span>
                                </div>
                                
                                <div id="creditNoteSuccess" class="alert alert-success mt-2" style="display: none;">
                                    <i class="fas fa-check-circle"></i>
                                    <span id="creditNoteSuccessMessage"></span>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <!-- Order Totals -->
                    <div class="order-totals">
                        <div class="d-flex justify-content-between">
                            <span>Subtotal:</span>
                            <span>R @Model.SubTotal.ToString("N2")</span>
                        </div>
                        
                        <div class="d-flex justify-content-between">
                            <span>VAT (15%):</span>
                            <span>R @Model.TaxAmount.ToString("N2")</span>
                        </div>
                        
                        <div class="d-flex justify-content-between">
                            <span>Shipping:</span>
                            <span id="shippingAmount">R @Model.ShippingFee.ToString("N2")</span>
                        </div>
                        
                        @if (Model.HasValidCreditNote && Model.CreditNoteAmount > 0)
                        {
                            <div class="d-flex justify-content-between text-success">
                                <span><i class="fas fa-ticket-alt"></i> Credit Note:</span>
                                <span>-R @Model.CreditNoteAmount.ToString("N2")</span>
                            </div>
                        }
                        
                        <div class="d-flex justify-content-between">
                            <strong><i class="fas fa-calculator"></i> Total:</strong>
                            <strong id="totalAmount">R @Model.Total.ToString("N2")</strong>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Handle delivery method change
            $('input[name="FulfillmentMethod"]').change(function() {
                var method = $(this).val();
                
                // Update visual selection for delivery method cards
                $('.delivery-method-card').removeClass('selected');
                $(this).closest('.delivery-method-card').addClass('selected');
                
                if (method === 'DELIVERY') {
                    $('#addressSection').show().addClass('fade-in');
                    $('#pickupSection').hide();
                    $('#selectedDeliveryMethod').html('<small class="text-success"><i class="fas fa-truck"></i> Home Delivery</small>');
                    updateSelectedAddress();
                } else {
                    $('#addressSection').hide();
                    $('#pickupSection').show().addClass('fade-in');
                    $('#selectedDeliveryMethod').html('<small class="text-info"><i class="fas fa-store"></i> Store Pickup</small>');
                    $('#selectedAddress').hide();
                }
                calculateShipping();
            });
            
            // Initialize delivery method selection on page load
            $('input[name="FulfillmentMethod"]:checked').closest('.delivery-method-card').addClass('selected');
            $('input[name="FulfillmentMethod"]:checked').trigger('change');

            // Handle address selection change
            $('input[name="SelectedAddressId"]').change(function() {
                // Update visual selection for address cards
                $('.address-card').removeClass('selected');
                $(this).closest('.address-card').addClass('selected');
                updateSelectedAddress();
                calculateShipping();
            });
            
            // Function to update selected address display
            function updateSelectedAddress() {
                var selectedAddress = $('input[name="ShippingAddressId"]:checked');
                if (selectedAddress.length > 0) {
                    var addressCard = selectedAddress.closest('.address-card');
                    var fullName = addressCard.find('h6').text();
                    var addressLine1 = addressCard.find('p').first().text();
                    var cityProvince = addressCard.find('p').eq(1).text();
                    
                    var addressHtml = '<div class="small">' +
                        '<strong>' + fullName + '</strong><br>' +
                        addressLine1 + '<br>' +
                        cityProvince +
                        '</div>';
                    
                    $('#addressDetails').html(addressHtml);
                    $('#selectedAddress').show();
                } else {
                    $('#selectedAddress').hide();
                }
            }
            
            // Initialize address selection on page load
            $('input[name="ShippingAddressId"]:checked').closest('.address-card').addClass('selected');
            
            // Add click handlers for delivery method cards
            $('.delivery-method-card').click(function() {
                $(this).find('input[type="radio"]').prop('checked', true).trigger('change');
            });
            
            // Add click handlers for address cards
            $('.address-card').click(function() {
                $(this).find('input[type="radio"]').prop('checked', true).trigger('change');
            });

            // Calculate shipping when page loads
            calculateShipping();

            function calculateShipping() {
                var method = $('input[name="FulfillmentMethod"]:checked').val();
                var addressId = $('input[name="ShippingAddressId"]:checked').val();
                
                if (method === 'PICKUP') {
                    updateShipping(0);
                    return;
                }
                
                if (method === 'DELIVERY' && addressId) {
                    $.ajax({
                        url: '@Url.Action("CalculateShipping")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            addressId: parseInt(addressId),
                            fulfillmentMethod: method
                        }),
                        success: function(response) {
                            if (response.success) {
                                updateShipping(response.shippingFee);
                            }
                        },
                        error: function() {
                            console.error('Failed to calculate shipping');
                        }
                    });
                } else {
                    updateShipping(0);
                }
            }

            function updateShipping(shippingFee) {
                var subtotal = @Model.SubTotal;
                var tax = @Model.TaxAmount;
                var creditNoteAmount = @Model.CreditNoteAmount;
                var totalBeforeDiscount = subtotal + tax + shippingFee;
                var total = Math.max(0, totalBeforeDiscount - creditNoteAmount);
                
                $('#shippingAmount').text('R ' + shippingFee.toFixed(2));
                $('#totalAmount').text('R ' + total.toFixed(2));
                $('#hiddenShippingFee').val(shippingFee);
                $('#hiddenTotal').val(total);
                
                if (shippingFee === 0) {
                    $('#shippingRow').hide();
                } else {
                    $('#shippingRow').show();
                }
            }
            
            // Function to switch to pickup when customer has no addresses
            window.switchToPickup = function() {
                // Select pickup method
                $('input[name="FulfillmentMethod"][value="PICKUP"]').prop('checked', true).trigger('change');
                
                // Clear any selected address
                $('input[name="SelectedAddressId"]').prop('checked', false);
                
                // Clear UseInlineAddress flag
                $('input[name="UseInlineAddress"]').remove();
                
                // Hide address selection and inline form
                $('#addressSection').hide();
                $('#inlineAddressForm').hide();
                $('#selectedAddress').hide();
                
                // Show pickup information
                $('#pickupSection').show();
                
                // Update delivery method display
                $('#selectedDeliveryMethod').html('<small class="text-info"><i class="fas fa-store"></i> Store Pickup</small>');
                
                // Clear any alerts
                $('.alert').remove();
                
                // Update totals (pickup is usually free)
                calculateShipping();
                
                // Show success message
                var successAlert = $('<div class="alert alert-success alert-dismissible fade show mt-3" role="alert">' +
                    '<i class="fas fa-check-circle"></i> Store pickup selected! You can collect your order from our store.' +
                    '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                    '</div>');
                $('#pickupSection').append(successAlert);
                
                // Auto-dismiss after 5 seconds
                setTimeout(function() {
                    successAlert.alert('close');
                }, 5000);
                
                // Scroll to the pickup section
                setTimeout(function() {
                    $('html, body').animate({
                        scrollTop: $('#pickupSection').offset().top - 100
                    }, 500);
                }, 300);
            };

            // Functions for inline address form (workaround)
            window.showInlineAddressForm = function() {
                $('#inlineAddressForm').slideDown(300);
                $('html, body').animate({
                    scrollTop: $('#inlineAddressForm').offset().top - 100
                }, 500);
            };

            window.hideInlineAddressForm = function() {
                $('#inlineAddressForm').slideUp(300);
                // Clear form fields
                $('#inlineAddressForm input[type="text"], #inlineAddressForm input[type="tel"]').val('');
                $('#inlineAddressForm select').val('');
                $('#inlineAddressForm input[type="checkbox"]').prop('checked', false);
                $('#inlineAddressForm .form-control').removeClass('is-valid is-invalid');
            };

            window.validateInlineAddress = function() {
                var isValid = true;
                var requiredFields = ['InlineAddress_FullName', 'InlineAddress_PhoneNumber', 'InlineAddress_AddressLine1', 'InlineAddress_City', 'InlineAddress_Province', 'InlineAddress_PostalCode'];
                
                // Clear previous validation states and alerts
                $('#inlineAddressForm .form-control').removeClass('is-valid is-invalid');
                $('#inlineAddressForm .alert').remove();
                
                // Validate required fields
                requiredFields.forEach(function(fieldId) {
                    var field = $('#' + fieldId);
                    var value = field.val().trim();
                    
                    if (!value) {
                        field.addClass('is-invalid');
                        isValid = false;
                    } else {
                        field.addClass('is-valid');
                    }
                });
                
                // Validate postal code format
                var postalCode = $('#InlineAddress_PostalCode').val().trim();
                if (postalCode && !/^[0-9]{4}$/.test(postalCode)) {
                    $('#InlineAddress_PostalCode').addClass('is-invalid');
                    isValid = false;
                }
                
                // Validate phone number format
                var phoneNumber = $('#InlineAddress_PhoneNumber').val().trim();
                if (phoneNumber && !/^(\+27|0)[0-9]{9}$/.test(phoneNumber)) {
                    $('#InlineAddress_PhoneNumber').addClass('is-invalid');
                    isValid = false;
                }
                
                if (isValid) {
                    // Set the UseInlineAddress flag
                    if ($('input[name="UseInlineAddress"]').length === 0) {
                        $('#checkoutForm').append('<input type="hidden" name="UseInlineAddress" value="true">');
                    } else {
                        $('input[name="UseInlineAddress"]').val('true');
                    }
                    
                    // Enable delivery method and update display
                    $('input[name="FulfillmentMethod"][value="DELIVERY"]').prop('checked', true).trigger('change');
                    
                    // Update selected address display
                    var addressText = $('#InlineAddress_FullName').val() + '<br>' +
                                    $('#InlineAddress_AddressLine1').val() + '<br>' +
                                    $('#InlineAddress_City').val() + ', ' + $('#InlineAddress_Province').val() + ' ' + $('#InlineAddress_PostalCode').val();
                    $('#addressDetails').html(addressText);
                    $('#selectedAddress').show();
                    
                    // Hide the form
                    $('#inlineAddressForm').slideUp(300);
                    
                    // Show success message
                    var successAlert = $('<div class="alert alert-success alert-dismissible fade show mt-3" role="alert">' +
                        '<i class="fas fa-check-circle"></i> Address saved successfully! You can now place your order.' +
                        '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                        '</div>');
                    $('#addressSection').append(successAlert);
                    
                    // Auto-dismiss after 5 seconds
                    setTimeout(function() {
                        successAlert.alert('close');
                    }, 5000);
                    
                    // Scroll to order summary
                    setTimeout(function() {
                        $('html, body').animate({
                            scrollTop: $('#placeOrderBtn').offset().top - 200
                        }, 500);
                    }, 300);
                } else {
                    // Show error message
                    var errorAlert = $('<div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">' +
                        '<i class="fas fa-exclamation-triangle"></i> Please fill in all required fields correctly.' +
                        '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                        '</div>');
                    $('#inlineAddressForm .card-body').prepend(errorAlert);
                    
                    // Auto-dismiss after 5 seconds
                    setTimeout(function() {
                        errorAlert.alert('close');
                    }, 5000);
                }
            };

            // Form validation
            $('#checkoutForm').submit(function(e) {
                var method = $('input[name="FulfillmentMethod"]:checked').val();
                
                if (method === 'DELIVERY') {
                    var addressSelected = $('input[name="SelectedAddressId"]:checked').length > 0;
                    var inlineAddressUsed = $('input[name="UseInlineAddress"]').length > 0 && $('#InlineAddress_FullName').val().trim() !== '';
                    
                    if (!addressSelected && !inlineAddressUsed) {
                        e.preventDefault();
                        alert('Please select a delivery address or enter your address details.');
                        return false;
                    }
                    
                    // If using inline address, validate it's filled out
                    if (inlineAddressUsed) {
                        var requiredFields = ['InlineAddress_FullName', 'InlineAddress_PhoneNumber', 'InlineAddress_AddressLine1', 'InlineAddress_City', 'InlineAddress_Province', 'InlineAddress_PostalCode'];
                        var isValid = true;
                        
                        requiredFields.forEach(function(fieldId) {
                            var value = $('#' + fieldId).val().trim();
                            if (!value) {
                                isValid = false;
                            }
                        });
                        
                        if (!isValid) {
                            e.preventDefault();
                            alert('Please fill in all required address fields.');
                            return false;
                        }
                    }
                }
                
                $('#placeOrderBtn').prop('disabled', true).html('<div class="loading-spinner"></div> Processing Order...');
            });
            
            // Credit Note Functions
            window.applyCreditNote = function() {
                var code = $('#creditNoteCode').val().trim();
                var amount = parseFloat($('#creditNoteAmount').val()) || 0;
                
                if (!code) {
                    showCreditNoteError('Please enter a credit note code.');
                    return;
                }
                
                // Show loading state
                var applyBtn = $('#creditNoteCode').next('button');
                var originalText = applyBtn.html();
                applyBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Applying...');
                
                // Make AJAX request to validate and apply credit note
                $.ajax({
                    url: '@Url.Action("ValidateCreditNote", "Checkout")',
                    type: 'POST',
                    data: {
                        creditNoteCode: code,
                        requestedAmount: amount
                    },
                    success: function(response) {
                        if (response.success) {
                            // Update form with credit note data
                            $('<input>').attr({
                                type: 'hidden',
                                name: 'CreditNoteCode',
                                value: code
                            }).appendTo('#checkoutForm');
                            
                            $('<input>').attr({
                                type: 'hidden',
                                name: 'CreditNoteRequestedAmount',
                                value: amount
                            }).appendTo('#checkoutForm');
                            
                            // Redirect to checkout with credit note parameters
                            window.location.href = '@Url.Action("Index", "Checkout")' + 
                                '?creditNoteCode=' + encodeURIComponent(code) + 
                                '&creditNoteAmount=' + amount;
                        } else {
                            showCreditNoteError(response.message || 'Invalid credit note code.');
                        }
                    },
                    error: function() {
                        showCreditNoteError('An error occurred while validating the credit note.');
                    },
                    complete: function() {
                        applyBtn.prop('disabled', false).html(originalText);
                    }
                });
            };
            
            window.removeCreditNote = function() {
                // Remove credit note from form
                $('input[name="CreditNoteCode"]').remove();
                $('input[name="CreditNoteRequestedAmount"]').remove();
                
                // Redirect to checkout without credit note parameters
                window.location.href = '@Url.Action("Index", "Checkout")';
            };
            
            window.selectCreditNote = function(code, amount) {
                $('#creditNoteCode').val(code);
                $('#creditNoteAmount').val(amount);
            };
            
            function showCreditNoteError(message) {
                $('#creditNoteError').show();
                $('#creditNoteErrorMessage').text(message);
                $('#creditNoteSuccess').hide();
                
                setTimeout(function() {
                    $('#creditNoteError').fadeOut();
                }, 5000);
            }
            
            function showCreditNoteSuccess(message) {
                $('#creditNoteSuccess').show();
                $('#creditNoteSuccessMessage').text(message);
                $('#creditNoteError').hide();
                
                setTimeout(function() {
                    $('#creditNoteSuccess').fadeOut();
                }, 5000);
            }
        });
    </script>
}

<style>
    :root {
        --primary: #1399FF;
        --accent-magenta: #FF37B9;
        --success: #10B981;
        --warning: #F59E0B;
        --danger: #EF4444;
        --text-dark: #111111;
        --text-muted: #6B7280;
        --border: #E5E7EB;
        --card-bg: #FFFFFF;
        --page-bg: #F8FAFC;
        --radius-card: 16px;
        --radius-button: 8px;
        --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --gradient-primary: linear-gradient(135deg, var(--primary), var(--accent-magenta));
    }

    body {
        background-color: var(--page-bg) !important;
        font-family: 'Inter', system-ui, -apple-system, 'Segoe UI', Roboto, Arial, sans-serif;
    }

    .checkout-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }

    .checkout-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .checkout-header h1 {
        font-size: 2.5rem;
        font-weight: 800;
        background: var(--gradient-primary);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 0.5rem;
    }

    .checkout-header p {
        color: var(--text-muted);
        font-size: 1.1rem;
    }

    .checkout-card {
        background: var(--card-bg);
        border-radius: var(--radius-card);
        box-shadow: var(--shadow-md);
        border: 1px solid var(--border);
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .checkout-card:hover {
        box-shadow: var(--shadow-lg);
        transform: translateY(-2px);
    }

    .checkout-card .card-header {
        background: var(--gradient-primary);
        color: white;
        border: none;
        padding: 1.5rem;
    }

    .checkout-card .card-header h4,
    .checkout-card .card-header h5 {
        margin: 0;
        font-weight: 700;
    }

    .checkout-card .card-body {
        padding: 2rem;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--text-dark);
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }