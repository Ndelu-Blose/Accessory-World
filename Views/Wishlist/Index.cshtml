@model List<AccessoryWorld.Models.WishlistItem>
@{
    ViewData["Title"] = "My Wishlist";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<style>
    :root {
        --primary-color: #2c3e50;
        --secondary-color: #3498db;
        --accent-color: #e74c3c;
        --success-color: #27ae60;
        --warning-color: #f39c12;
        --light-gray: #ecf0f1;
        --medium-gray: #bdc3c7;
        --dark-gray: #34495e;
        --white: #ffffff;
        --shadow: 0 2px 10px rgba(0,0,0,0.1);
        --border-radius: 8px;
        --transition: all 0.3s ease;
    }

    .wishlist-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background: var(--light-gray);
        min-height: 100vh;
    }

    .wishlist-header {
        background: var(--white);
        padding: 30px;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        margin-bottom: 30px;
        text-align: center;
    }

    .wishlist-header h1 {
        color: var(--primary-color);
        margin: 0 0 10px 0;
        font-size: 2.5rem;
        font-weight: 600;
    }

    .wishlist-header p {
        color: var(--medium-gray);
        margin: 0;
        font-size: 1.1rem;
    }

    .wishlist-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        flex-wrap: wrap;
        gap: 15px;
    }

    .wishlist-count {
        color: var(--dark-gray);
        font-size: 1.1rem;
        font-weight: 500;
    }

    .clear-wishlist-btn {
        background: var(--accent-color);
        color: var(--white);
        border: none;
        padding: 10px 20px;
        border-radius: var(--border-radius);
        cursor: pointer;
        font-size: 1rem;
        transition: var(--transition);
        text-decoration: none;
        display: inline-block;
    }

    .clear-wishlist-btn:hover {
        background: #c0392b;
        transform: translateY(-2px);
    }

    .wishlist-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .wishlist-item {
        background: var(--white);
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        overflow: hidden;
        transition: var(--transition);
        position: relative;
    }

    .wishlist-item:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 20px rgba(0,0,0,0.15);
    }

    .product-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
        background: var(--light-gray);
    }

    .item-content {
        padding: 20px;
    }

    .product-name {
        font-size: 1.2rem;
        font-weight: 600;
        color: var(--primary-color);
        margin: 0 0 10px 0;
        line-height: 1.4;
    }

    .product-price {
        font-size: 1.3rem;
        font-weight: 700;
        color: var(--secondary-color);
        margin: 0 0 15px 0;
    }

    .product-description {
        color: var(--medium-gray);
        font-size: 0.9rem;
        line-height: 1.5;
        margin: 0 0 20px 0;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .item-actions {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .btn {
        padding: 10px 15px;
        border: none;
        border-radius: var(--border-radius);
        cursor: pointer;
        font-size: 0.9rem;
        font-weight: 500;
        text-decoration: none;
        text-align: center;
        transition: var(--transition);
        flex: 1;
        min-width: 120px;
    }

    .btn-primary {
        background: var(--secondary-color);
        color: var(--white);
    }

    .btn-primary:hover {
        background: #2980b9;
        transform: translateY(-2px);
    }

    .btn-danger {
        background: var(--accent-color);
        color: var(--white);
    }

    .btn-danger:hover {
        background: #c0392b;
        transform: translateY(-2px);
    }

    .empty-wishlist {
        text-align: center;
        padding: 60px 20px;
        background: var(--white);
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
    }

    .empty-wishlist i {
        font-size: 4rem;
        color: var(--medium-gray);
        margin-bottom: 20px;
    }

    .empty-wishlist h3 {
        color: var(--dark-gray);
        margin: 0 0 15px 0;
        font-size: 1.5rem;
    }

    .empty-wishlist p {
        color: var(--medium-gray);
        margin: 0 0 30px 0;
        font-size: 1.1rem;
    }

    .continue-shopping {
        background: var(--success-color);
        color: var(--white);
        padding: 15px 30px;
        border-radius: var(--border-radius);
        text-decoration: none;
        font-size: 1.1rem;
        font-weight: 500;
        transition: var(--transition);
        display: inline-block;
    }

    .continue-shopping:hover {
        background: #229954;
        transform: translateY(-2px);
    }

    .added-date {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(0,0,0,0.7);
        color: var(--white);
        padding: 5px 10px;
        border-radius: var(--border-radius);
        font-size: 0.8rem;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .wishlist-container {
            padding: 15px;
        }

        .wishlist-header {
            padding: 20px;
        }

        .wishlist-header h1 {
            font-size: 2rem;
        }

        .wishlist-grid {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .wishlist-actions {
            flex-direction: column;
            align-items: stretch;
        }

        .item-actions {
            flex-direction: column;
        }

        .btn {
            min-width: auto;
        }
    }

    @@media (max-width: 480px) {
        .wishlist-header h1 {
            font-size: 1.8rem;
        }

        .product-image {
            height: 150px;
        }

        .item-content {
            padding: 15px;
        }
    }
</style>

<div class="wishlist-container">
    <div class="wishlist-header">
        <h1><i class="fas fa-heart"></i> My Wishlist</h1>
        <p>Save your favorite items for later</p>
    </div>

    @if (Model != null && Model.Any())
    {
        <div class="wishlist-actions">
            <div class="wishlist-count">
                <strong>@Model.Count</strong> item@(Model.Count != 1 ? "s" : "") in your wishlist
            </div>
            <button class="clear-wishlist-btn" onclick="clearWishlist()">
                <i class="fas fa-trash"></i> Clear All
            </button>
        </div>

        <div class="wishlist-grid">
            @foreach (var item in Model)
            {
                <div class="wishlist-item" data-product-id="@item.ProductId">
                    <div class="added-date">
                        Added @item.AddedAt.ToString("MMM dd")
                    </div>
                    
                    @if (!string.IsNullOrEmpty(item.ProductImage))
                    {
                        <img src="@item.ProductImage" alt="@item.ProductName" class="product-image" />
                    }
                    else
                    {
                        <div class="product-image" style="display: flex; align-items: center; justify-content: center; background: var(--light-gray);">
                            <i class="fas fa-image" style="font-size: 2rem; color: var(--medium-gray);"></i>
                        </div>
                    }
                    
                    <div class="item-content">
                        <h3 class="product-name">@item.ProductName</h3>
                        <div class="product-price">@item.Currency @item.Price.ToString("F2")</div>
                        
                        <div class="item-actions">
                            <a href="@Url.Action("Details", "Product", new { id = item.ProductId })" class="btn btn-primary">
                                <i class="fas fa-eye"></i> View Details
                            </a>
                            <button class="btn btn-danger" onclick="removeFromWishlist(@item.ProductId)">
                                <i class="fas fa-trash"></i> Remove
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-wishlist">
            <i class="fas fa-heart-broken"></i>
            <h3>Your wishlist is empty</h3>
            <p>Start adding items you love to keep track of them!</p>
            <a href="@Url.Action("Index", "Products")" class="continue-shopping">
                <i class="fas fa-shopping-bag"></i> Continue Shopping
            </a>
        </div>
    }
</div>

<script>
    function removeFromWishlist(productId) {
        if (confirm('Are you sure you want to remove this item from your wishlist?')) {
            fetch('/Wishlist/Remove', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: `productId=${productId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Remove the item from the page
                    const itemElement = document.querySelector(`[data-product-id="${productId}"]`);
                    if (itemElement) {
                        itemElement.style.transition = 'all 0.3s ease';
                        itemElement.style.transform = 'scale(0)';
                        itemElement.style.opacity = '0';
                        setTimeout(() => {
                            itemElement.remove();
                            // Check if wishlist is now empty
                            const remainingItems = document.querySelectorAll('.wishlist-item');
                            if (remainingItems.length === 0) {
                                location.reload();
                            } else {
                                // Update count
                                const countElement = document.querySelector('.wishlist-count');
                                if (countElement) {
                                    const newCount = remainingItems.length;
                                    countElement.innerHTML = `<strong>${newCount}</strong> item${newCount !== 1 ? 's' : ''} in your wishlist`;
                                }
                            }
                        }, 300);
                    }
                    
                    // Show success message
                    showMessage(data.message, 'success');
                } else {
                    showMessage(data.message || 'Failed to remove item', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('An error occurred. Please try again.', 'error');
            });
        }
    }

    function clearWishlist() {
        if (confirm('Are you sure you want to clear your entire wishlist? This action cannot be undone.')) {
            fetch('/Wishlist/Clear', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    showMessage(data.message || 'Failed to clear wishlist', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('An error occurred. Please try again.', 'error');
            });
        }
    }

    function showMessage(message, type) {
        // Create a simple toast notification
        const toast = document.createElement('div');
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            transition: all 0.3s ease;
            ${type === 'success' ? 'background: #27ae60;' : 'background: #e74c3c;'}
        `;
        toast.textContent = message;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.opacity = '0';
            toast.style.transform = 'translateX(100%)';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }
</script>