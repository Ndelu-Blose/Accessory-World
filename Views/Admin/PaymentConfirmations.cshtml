@model IEnumerable<AccessoryWorld.ViewModels.PaymentConfirmationViewModel>
@{
    ViewData["Title"] = "Payment Confirmations";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="fas fa-credit-card"></i> Payment Confirmations
                    </h4>
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-success" onclick="exportPayments()">
                            <i class="fas fa-download"></i> Export
                        </button>
                        <button class="btn btn-primary" onclick="refreshPayments()">
                            <i class="fas fa-sync"></i> Refresh
                        </button>
                    </div>
                </div>
                
                <!-- Filters -->
                <div class="card-body border-bottom">
                    <form method="get" class="row g-3">
                        <div class="col-md-3">
                            <label for="status" class="form-label">Status</label>
                            <select class="form-select" id="status" name="status">
                                <option value="">All Statuses</option>
                                <option value="PENDING" selected="@(ViewBag.StatusFilter == "PENDING")">Pending</option>
                                <option value="COMPLETED" selected="@(ViewBag.StatusFilter == "COMPLETED")">Completed</option>
                                <option value="FAILED" selected="@(ViewBag.StatusFilter == "FAILED")">Failed</option>
                                <option value="REFUNDED" selected="@(ViewBag.StatusFilter == "REFUNDED")">Refunded</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="method" class="form-label">Payment Method</label>
                            <select class="form-select" id="method" name="method">
                                <option value="">All Methods</option>
                                <option value="CARD" selected="@(ViewBag.MethodFilter == "CARD")">Card</option>
                                <option value="EFT" selected="@(ViewBag.MethodFilter == "EFT")">EFT</option>
                                <option value="PAYFAST" selected="@(ViewBag.MethodFilter == "PAYFAST")">PayFast</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="dateFrom" class="form-label">Date From</label>
                            <input type="date" class="form-control" id="dateFrom" name="dateFrom" value="@ViewBag.DateFrom">
                        </div>
                        <div class="col-md-3">
                            <label for="dateTo" class="form-label">Date To</label>
                            <input type="date" class="form-control" id="dateTo" name="dateTo" value="@ViewBag.DateTo">
                        </div>
                        <div class="col-12">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-search"></i> Filter
                            </button>
                            <a href="@Url.Action("PaymentConfirmations")" class="btn btn-outline-secondary">
                                <i class="fas fa-times"></i> Clear
                            </a>
                        </div>
                    </form>
                </div>

                <div class="card-body p-0">
                    @if (Model != null && Model.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Payment ID</th>
                                        <th>Order</th>
                                        <th>Customer</th>
                                        <th>Amount</th>
                                        <th>Method</th>
                                        <th>Status</th>
                                        <th>Transaction ID</th>
                                        <th>Date</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var payment in Model)
                                    {
                                        <tr>
                                            <td>
                                                <strong>#@payment.Id</strong>
                                            </td>
                                            <td>
                                                <a href="@Url.Action("OrderDetails", new { id = payment.OrderId })" class="text-decoration-none">
                                                    #@payment.OrderNumber
                                                </a>
                                            </td>
                                            <td>
                                                <div>
                                                    @payment.CustomerName
                                                    <br>
                                                    <small class="text-muted">@payment.CustomerEmail</small>
                                                </div>
                                            </td>
                                            <td>
                                                <strong>R @payment.Amount.ToString("N2")</strong>
                                                @if (payment.RefundedAmount > 0)
                                                {
                                                    <br>
                                                    <small class="text-danger">Refunded: R @payment.RefundedAmount.ToString("N2")</small>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge bg-info">@payment.Method</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-@GetPaymentStatusColor(payment.Status)">@payment.Status</span>
                                                @if (!string.IsNullOrEmpty(payment.FailureReason))
                                                {
                                                    <br>
                                                    <small class="text-danger" title="@payment.FailureReason">
                                                        <i class="fas fa-exclamation-triangle"></i> Failed
                                                    </small>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(payment.TransactionId))
                                                {
                                                    <code>@payment.TransactionId</code>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                <div>
                                                    @payment.CreatedAt.ToString("MMM dd, yyyy")
                                                    <br>
                                                    <small class="text-muted">@payment.CreatedAt.ToString("HH:mm")</small>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-outline-primary btn-sm" title="View Details" 
                                                            onclick="viewPaymentDetails(@payment.Id)">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    @if (payment.Status == "COMPLETED" && payment.RefundedAmount < payment.Amount)
                                                    {
                                                        <button class="btn btn-outline-warning btn-sm" title="Process Refund" 
                                                                onclick="processRefund(@payment.Id, @payment.OrderId)">
                                                            <i class="fas fa-undo"></i>
                                                        </button>
                                                    }
                                                    @if (payment.Status == "PENDING")
                                                    {
                                                        <button class="btn btn-outline-success btn-sm" title="Confirm Payment" 
                                                                onclick="confirmPayment(@payment.Id)">
                                                            <i class="fas fa-check"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-credit-card fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No payment confirmations found</h5>
                            <p class="text-muted">Try adjusting your search criteria.</p>
                        </div>
                    }
                </div>
                
                <!-- Pagination -->
                @if (ViewBag.TotalPages > 1)
                {
                    <div class="card-footer">
                        <nav aria-label="Payment pagination">
                            <ul class="pagination justify-content-center mb-0">
                                @if (ViewBag.CurrentPage > 1)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="?page=@(ViewBag.CurrentPage - 1)&pageSize=@ViewBag.PageSize">
                                            <i class="fas fa-chevron-left"></i>
                                        </a>
                                    </li>
                                }
                                
                                @for (int i = Math.Max(1, ViewBag.CurrentPage - 2); i <= Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2); i++)
                                {
                                    <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                        <a class="page-link" href="?page=@i&pageSize=@ViewBag.PageSize">@i</a>
                                    </li>
                                }
                                
                                @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="?page=@(ViewBag.CurrentPage + 1)&pageSize=@ViewBag.PageSize">
                                            <i class="fas fa-chevron-right"></i>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </nav>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Payment Details Modal -->
<div class="modal fade" id="paymentDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Payment Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="paymentDetailsContent">
                <!-- Payment details will be loaded here -->
            </div>
        </div>
    </div>
</div>

<!-- Refund Modal -->
<div class="modal fade" id="refundModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Process Refund</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="refundForm">
                    <input type="hidden" id="refundPaymentId" name="paymentId">
                    <input type="hidden" id="refundOrderId" name="orderId">
                    <div class="mb-3">
                        <label for="refundAmount" class="form-label">Refund Amount</label>
                        <input type="number" class="form-control" id="refundAmount" name="amount" step="0.01" required>
                        <div class="form-text">Maximum refundable amount: R <span id="maxRefundAmount">0.00</span></div>
                    </div>
                    <div class="mb-3">
                        <label for="refundReason" class="form-label">Reason</label>
                        <select class="form-select" id="refundReason" name="reason" required>
                            <option value="">Select reason...</option>
                            <option value="CUSTOMER_REQUEST">Customer Request</option>
                            <option value="DEFECTIVE_PRODUCT">Defective Product</option>
                            <option value="WRONG_ITEM">Wrong Item Sent</option>
                            <option value="DAMAGED_SHIPPING">Damaged in Shipping</option>
                            <option value="ORDER_CANCELLATION">Order Cancellation</option>
                            <option value="OTHER">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="refundNotes" class="form-label">Additional Notes</label>
                        <textarea class="form-control" id="refundNotes" name="notes" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-warning" onclick="submitRefund()">
                    <i class="fas fa-undo me-1"></i>Process Refund
                </button>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetPaymentStatusColor(string status)
    {
        return status switch
        {
            "PENDING" => "warning",
            "COMPLETED" => "success",
            "FAILED" => "danger",
            "REFUNDED" => "secondary",
            "PARTIAL_REFUND" => "info",
            _ => "light"
        };
    }
}

@section Scripts {
    <script>
        function viewPaymentDetails(paymentId) {
            fetch(`/Admin/GetPaymentDetails/${paymentId}`)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('paymentDetailsContent').innerHTML = html;
                    new bootstrap.Modal(document.getElementById('paymentDetailsModal')).show();
                })
                .catch(error => {
                    alert('Error loading payment details');
                });
        }
        
        function processRefund(paymentId, orderId) {
            // Load payment details to get max refund amount
            fetch(`/Admin/GetPaymentRefundInfo/${paymentId}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('refundPaymentId').value = paymentId;
                    document.getElementById('refundOrderId').value = orderId;
                    document.getElementById('refundAmount').value = data.maxRefundAmount;
                    document.getElementById('refundAmount').max = data.maxRefundAmount;
                    document.getElementById('maxRefundAmount').textContent = data.maxRefundAmount.toFixed(2);
                    new bootstrap.Modal(document.getElementById('refundModal')).show();
                })
                .catch(error => {
                    alert('Error loading refund information');
                });
        }
        
        function submitRefund() {
            const form = document.getElementById('refundForm');
            const formData = new FormData(form);
            
            fetch('/Admin/ProcessRefund', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    bootstrap.Modal.getInstance(document.getElementById('refundModal')).hide();
                    location.reload();
                } else {
                    alert('Error processing refund: ' + data.message);
                }
            })
            .catch(error => {
                alert('Error processing refund');
            });
        }
        
        function confirmPayment(paymentId) {
            if (confirm('Are you sure you want to confirm this payment?')) {
                fetch('/Admin/ConfirmPayment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({ paymentId: paymentId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error confirming payment: ' + data.message);
                    }
                })
                .catch(error => {
                    alert('Error confirming payment');
                });
            }
        }
        
        function exportPayments() {
            window.location.href = '/Admin/ExportPayments';
        }
        
        function refreshPayments() {
            location.reload();
        }
    </script>
}